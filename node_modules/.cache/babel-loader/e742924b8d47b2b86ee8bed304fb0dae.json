{"ast":null,"code":"import axios from \"axios\";\n\nconst fetchData = async url => {\n  let result = [];\n  await axios.get(url).then(res => {\n    if (res.status === 200) {\n      result = res.data;\n    }\n  });\n  return result;\n};\n\nconst calculateStatistics = data => {\n  let temperatureSum = 0;\n  let highestTemp = data.list[0];\n  let lowestTemp = data.list[0];\n  let humiditySum = 0;\n  let highestHumidity = data.list[0];\n  let lowestHumidity = data.list[0];\n\n  for (const item of data.list) {\n    temperatureSum += item.main.temp;\n    humiditySum += item.main.humidity;\n\n    if (highestTemp.main.temp < item.main.temp) {\n      highestTemp = item;\n    }\n\n    if (lowestTemp.main.temp > item.main.temp) {\n      lowestTemp = item;\n    }\n\n    if (highestHumidity.main.temp < item.main.humidity) {\n      highestHumidity = item;\n    }\n\n    if (lowestHumidity.main.temp > item.main.humidity) {\n      lowestHumidity = item;\n    }\n  }\n\n  return {\n    temperature: {\n      max: highestTemp.main.temp,\n      avg: temperatureSum / data.list.length,\n      min: lowestTemp.main.temp\n    },\n    humidity: {\n      max: highestHumidity.main.humidity,\n      avg: humiditySum / data.list.length,\n      min: lowestHumidity.main.humidity\n    },\n    warmestTime: new Date(highestTemp.dt * 1000),\n    coldestTime: new Date(lowestTemp.dt * 1000)\n  };\n};\n\nexport default fetchData;","map":{"version":3,"sources":["/Users/bojan/Desktop/weather_app_react/src/utils.js"],"names":["axios","fetchData","url","result","get","then","res","status","data","calculateStatistics","temperatureSum","highestTemp","list","lowestTemp","humiditySum","highestHumidity","lowestHumidity","item","main","temp","humidity","temperature","max","avg","length","min","warmestTime","Date","dt","coldestTime"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAS,GAAG,MAAOC,GAAP,IAAe;AAC/B,MAAIC,MAAM,GAAG,EAAb;AACA,QAAMH,KAAK,CAACI,GAAN,CAAUF,GAAV,EAAeG,IAAf,CAAqBC,GAAD,IAAS;AACjC,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBJ,MAAAA,MAAM,GAAGG,GAAG,CAACE,IAAb;AACD;AACF,GAJK,CAAN;AAKA,SAAOL,MAAP;AACD,CARD;;AAUA,MAAMM,mBAAmB,GAAID,IAAD,IAAU;AACpC,MAAIE,cAAc,GAAG,CAArB;AACA,MAAIC,WAAW,GAAGH,IAAI,CAACI,IAAL,CAAU,CAAV,CAAlB;AACA,MAAIC,UAAU,GAAGL,IAAI,CAACI,IAAL,CAAU,CAAV,CAAjB;AACA,MAAIE,WAAW,GAAG,CAAlB;AACA,MAAIC,eAAe,GAAGP,IAAI,CAACI,IAAL,CAAU,CAAV,CAAtB;AACA,MAAII,cAAc,GAAGR,IAAI,CAACI,IAAL,CAAU,CAAV,CAArB;;AACA,OAAK,MAAMK,IAAX,IAAmBT,IAAI,CAACI,IAAxB,EAA8B;AAC5BF,IAAAA,cAAc,IAAIO,IAAI,CAACC,IAAL,CAAUC,IAA5B;AACAL,IAAAA,WAAW,IAAIG,IAAI,CAACC,IAAL,CAAUE,QAAzB;;AACA,QAAIT,WAAW,CAACO,IAAZ,CAAiBC,IAAjB,GAAwBF,IAAI,CAACC,IAAL,CAAUC,IAAtC,EAA4C;AAC1CR,MAAAA,WAAW,GAAGM,IAAd;AACD;;AACD,QAAIJ,UAAU,CAACK,IAAX,CAAgBC,IAAhB,GAAuBF,IAAI,CAACC,IAAL,CAAUC,IAArC,EAA2C;AACzCN,MAAAA,UAAU,GAAGI,IAAb;AACD;;AACD,QAAIF,eAAe,CAACG,IAAhB,CAAqBC,IAArB,GAA4BF,IAAI,CAACC,IAAL,CAAUE,QAA1C,EAAoD;AAClDL,MAAAA,eAAe,GAAGE,IAAlB;AACD;;AACD,QAAID,cAAc,CAACE,IAAf,CAAoBC,IAApB,GAA2BF,IAAI,CAACC,IAAL,CAAUE,QAAzC,EAAmD;AACjDJ,MAAAA,cAAc,GAAGC,IAAjB;AACD;AACF;;AACD,SAAO;AACLI,IAAAA,WAAW,EAAE;AACXC,MAAAA,GAAG,EAAEX,WAAW,CAACO,IAAZ,CAAiBC,IADX;AAEXI,MAAAA,GAAG,EAAEb,cAAc,GAAGF,IAAI,CAACI,IAAL,CAAUY,MAFrB;AAGXC,MAAAA,GAAG,EAAEZ,UAAU,CAACK,IAAX,CAAgBC;AAHV,KADR;AAMLC,IAAAA,QAAQ,EAAE;AACRE,MAAAA,GAAG,EAAEP,eAAe,CAACG,IAAhB,CAAqBE,QADlB;AAERG,MAAAA,GAAG,EAAET,WAAW,GAAGN,IAAI,CAACI,IAAL,CAAUY,MAFrB;AAGRC,MAAAA,GAAG,EAAET,cAAc,CAACE,IAAf,CAAoBE;AAHjB,KANL;AAWLM,IAAAA,WAAW,EAAE,IAAIC,IAAJ,CAAShB,WAAW,CAACiB,EAAZ,GAAiB,IAA1B,CAXR;AAYLC,IAAAA,WAAW,EAAE,IAAIF,IAAJ,CAASd,UAAU,CAACe,EAAX,GAAgB,IAAzB;AAZR,GAAP;AAcD,CArCD;;AAuCA,eAAe3B,SAAf","sourcesContent":["import axios from \"axios\";\n\nconst fetchData = async (url) => {\n  let result = [];\n  await axios.get(url).then((res) => {\n    if (res.status === 200) {\n      result = res.data;\n    }\n  });\n  return result;\n};\n\nconst calculateStatistics = (data) => {\n  let temperatureSum = 0;\n  let highestTemp = data.list[0];\n  let lowestTemp = data.list[0];\n  let humiditySum = 0;\n  let highestHumidity = data.list[0];\n  let lowestHumidity = data.list[0];\n  for (const item of data.list) {\n    temperatureSum += item.main.temp;\n    humiditySum += item.main.humidity;\n    if (highestTemp.main.temp < item.main.temp) {\n      highestTemp = item;\n    }\n    if (lowestTemp.main.temp > item.main.temp) {\n      lowestTemp = item;\n    }\n    if (highestHumidity.main.temp < item.main.humidity) {\n      highestHumidity = item;\n    }\n    if (lowestHumidity.main.temp > item.main.humidity) {\n      lowestHumidity = item;\n    }\n  }\n  return {\n    temperature: {\n      max: highestTemp.main.temp,\n      avg: temperatureSum / data.list.length,\n      min: lowestTemp.main.temp,\n    },\n    humidity: {\n      max: highestHumidity.main.humidity,\n      avg: humiditySum / data.list.length,\n      min: lowestHumidity.main.humidity,\n    },\n    warmestTime: new Date(highestTemp.dt * 1000),\n    coldestTime: new Date(lowestTemp.dt * 1000),\n  };\n};\n\nexport default fetchData;\n"]},"metadata":{},"sourceType":"module"}