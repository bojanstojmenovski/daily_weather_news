{"ast":null,"code":"var _jsxFileName = \"/Users/bojan/Desktop/weather_app_react/src/components/LoadedStats.jsx\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport \"./css/PageView.css\";\nimport { WeatherData } from \"../utilities/WeatherData\";\n\nconst LoadedStats = props => {\n  const {\n    calculatedStats\n  } = useContext(WeatherData);\n  console.log(calculatedStats);\n  const [city, setCity] = useState({});\n  useEffect(() => {\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${this.props.match.params.city}&units=metric&APPID=a2b4e52032d2ff195e2ec1133387d853`).then(res => res.json()).then(city => setCity(city)).catch(e => console.log(e));\n  }, [this.props.match.params.city]);\n  const {\n    temperature,\n    humidity\n  } = city;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"statisticsResult\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, \"MAX TEMP: $\", temperature.max, \" C\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, \"MAX HUMD: $\", humidity.max, \" %\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, \"AVG TEMP: $\", temperature.avg.toFixed(2), \" C\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, \"AVG HUMD: $\", humidity.avg.toFixed(2), \" %\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, \"MIN TEMP: $\", temperature.min, \" C\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, \"MIN HUMD: $\", humidity.min, \" %\")), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Warmest time of the following period: $\", calculatedStats.warmestTime), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, \"Coldest time of the following period: $\", calculatedStats.coldestTime));\n};\n\nexport default LoadedStats;","map":{"version":3,"sources":["/Users/bojan/Desktop/weather_app_react/src/components/LoadedStats.jsx"],"names":["React","useContext","useState","useEffect","WeatherData","LoadedStats","props","calculatedStats","console","log","city","setCity","fetch","match","params","then","res","json","catch","e","temperature","humidity","max","avg","toFixed","min","warmestTime","coldestTime"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAO,oBAAP;AACA,SAASC,WAAT,QAA4B,0BAA5B;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAsBN,UAAU,CAACG,WAAD,CAAtC;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,eAAZ;AAEA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,KAAK,CACF,sDAAqD,KAAKN,KAAL,CAAWO,KAAX,CAAiBC,MAAjB,CAAwBJ,IAAK,sDADhF,CAAL,CAGGK,IAHH,CAGSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAHjB,EAIGF,IAJH,CAISL,IAAD,IAAUC,OAAO,CAACD,IAAD,CAJzB,EAKGQ,KALH,CAKUC,CAAD,IAAOX,OAAO,CAACC,GAAR,CAAYU,CAAZ,CALhB;AAMD,GAPQ,EAON,CAAC,KAAKb,KAAL,CAAWO,KAAX,CAAiBC,MAAjB,CAAwBJ,IAAzB,CAPM,CAAT;AASA,QAAM;AAAEU,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA4BX,IAAlC;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAsCU,WAAW,CAACE,GAAlD,OADF,eAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAsCD,QAAQ,CAACC,GAA/C,OAFF,CADF,eAKE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACcF,WAAW,CAACG,GAAZ,CAAgBC,OAAhB,CAAwB,CAAxB,CADd,OADF,eAIE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAsCH,QAAQ,CAACE,GAAT,CAAaC,OAAb,CAAqB,CAArB,CAAtC,OAJF,CALF,eAWE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAsCJ,WAAW,CAACK,GAAlD,OADF,eAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAsCJ,QAAQ,CAACI,GAA/C,OAFF,CAXF,eAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAC0ClB,eAAe,CAACmB,WAD1D,CAfF,eAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAC0CnB,eAAe,CAACoB,WAD1D,CAlBF,CADF;AAwBD,CAzCD;;AA2CA,eAAetB,WAAf","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport \"./css/PageView.css\";\nimport { WeatherData } from \"../utilities/WeatherData\";\n\nconst LoadedStats = (props) => {\n  const { calculatedStats } = useContext(WeatherData);\n  console.log(calculatedStats);\n\n  const [city, setCity] = useState({});\n\n  useEffect(() => {\n    fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${this.props.match.params.city}&units=metric&APPID=a2b4e52032d2ff195e2ec1133387d853`\n    )\n      .then((res) => res.json())\n      .then((city) => setCity(city))\n      .catch((e) => console.log(e));\n  }, [this.props.match.params.city]);\n\n  const { temperature, humidity } = city;\n\n  return (\n    <div className=\"statisticsResult\">\n      <div className=\"row\">\n        <div className=\"col-md-6\">MAX TEMP: ${temperature.max} C</div>\n        <div className=\"col-md-6\">MAX HUMD: ${humidity.max} %</div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          AVG TEMP: ${temperature.avg.toFixed(2)} C\n        </div>\n        <div className=\"col-md-6\">AVG HUMD: ${humidity.avg.toFixed(2)} %</div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-md-6\">MIN TEMP: ${temperature.min} C</div>\n        <div className=\"col-md-6\">MIN HUMD: ${humidity.min} %</div>\n      </div>\n      <h3>\n        Warmest time of the following period: ${calculatedStats.warmestTime}\n      </h3>\n      <h3>\n        Coldest time of the following period: ${calculatedStats.coldestTime}\n      </h3>\n    </div>\n  );\n};\n\nexport default LoadedStats;\n"]},"metadata":{},"sourceType":"module"}