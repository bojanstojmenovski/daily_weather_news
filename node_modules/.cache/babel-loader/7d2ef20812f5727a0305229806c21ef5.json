{"ast":null,"code":"const calculateStatistics = data => {\n  let temperatureSum = 0;\n  let highestTemp = data.list[0];\n  let lowestTemp = data.list[0];\n  let humiditySum = 0;\n  let highestHumidity = data.list[0];\n  let lowestHumidity = data.list[0];\n\n  for (const item of data.list) {\n    temperatureSum += item.main.temp;\n    humiditySum += item.main.humidity;\n\n    if (highestTemp.main.temp < item.main.temp) {\n      highestTemp = item;\n    }\n\n    if (lowestTemp.main.temp > item.main.temp) {\n      lowestTemp = item;\n    }\n\n    if (highestHumidity.main.temp < item.main.humidity) {\n      highestHumidity = item;\n    }\n\n    if (lowestHumidity.main.temp > item.main.humidity) {\n      lowestHumidity = item;\n    }\n  }\n\n  return {\n    temperature: {\n      max: highestTemp.main.temp.toFixed(),\n      avg: temperatureSum / data.list.length,\n      min: lowestTemp.main.temp.toFixed()\n    },\n    humidity: {\n      max: highestHumidity.main.humidity.toFixed(),\n      avg: humiditySum / data.list.length,\n      min: lowestHumidity.main.humidity.toFixed()\n    },\n    warmestTime: `${highestTemp.dt_txt.split(\" \")[1]}h, ${highestTemp.dt_txt.split(\" \")[0]}`,\n    coldestTime: `${lowestTemp.dt_txt.split(\" \")[1]}h, ${lowestTemp.dt_txt.split(\" \")[0]}` // warmestTime: new Date(highestTemp.dt * 1000).toUTCString(),\n    // coldestTime: new Date(lowestTemp.dt * 1000).toUTCString(),\n\n  };\n};\n\nexport default calculateStatistics;","map":{"version":3,"sources":["/Users/bojan/Desktop/daily_weather_news/src/utilities/calculateStats.js"],"names":["calculateStatistics","data","temperatureSum","highestTemp","list","lowestTemp","humiditySum","highestHumidity","lowestHumidity","item","main","temp","humidity","temperature","max","toFixed","avg","length","min","warmestTime","dt_txt","split","coldestTime"],"mappings":"AAAA,MAAMA,mBAAmB,GAAIC,IAAD,IAAU;AACpC,MAAIC,cAAc,GAAG,CAArB;AACA,MAAIC,WAAW,GAAGF,IAAI,CAACG,IAAL,CAAU,CAAV,CAAlB;AACA,MAAIC,UAAU,GAAGJ,IAAI,CAACG,IAAL,CAAU,CAAV,CAAjB;AACA,MAAIE,WAAW,GAAG,CAAlB;AACA,MAAIC,eAAe,GAAGN,IAAI,CAACG,IAAL,CAAU,CAAV,CAAtB;AACA,MAAII,cAAc,GAAGP,IAAI,CAACG,IAAL,CAAU,CAAV,CAArB;;AACA,OAAK,MAAMK,IAAX,IAAmBR,IAAI,CAACG,IAAxB,EAA8B;AAC5BF,IAAAA,cAAc,IAAIO,IAAI,CAACC,IAAL,CAAUC,IAA5B;AACAL,IAAAA,WAAW,IAAIG,IAAI,CAACC,IAAL,CAAUE,QAAzB;;AACA,QAAIT,WAAW,CAACO,IAAZ,CAAiBC,IAAjB,GAAwBF,IAAI,CAACC,IAAL,CAAUC,IAAtC,EAA4C;AAC1CR,MAAAA,WAAW,GAAGM,IAAd;AACD;;AACD,QAAIJ,UAAU,CAACK,IAAX,CAAgBC,IAAhB,GAAuBF,IAAI,CAACC,IAAL,CAAUC,IAArC,EAA2C;AACzCN,MAAAA,UAAU,GAAGI,IAAb;AACD;;AACD,QAAIF,eAAe,CAACG,IAAhB,CAAqBC,IAArB,GAA4BF,IAAI,CAACC,IAAL,CAAUE,QAA1C,EAAoD;AAClDL,MAAAA,eAAe,GAAGE,IAAlB;AACD;;AACD,QAAID,cAAc,CAACE,IAAf,CAAoBC,IAApB,GAA2BF,IAAI,CAACC,IAAL,CAAUE,QAAzC,EAAmD;AACjDJ,MAAAA,cAAc,GAAGC,IAAjB;AACD;AACF;;AACD,SAAO;AACLI,IAAAA,WAAW,EAAE;AACXC,MAAAA,GAAG,EAAEX,WAAW,CAACO,IAAZ,CAAiBC,IAAjB,CAAsBI,OAAtB,EADM;AAEXC,MAAAA,GAAG,EAAEd,cAAc,GAAGD,IAAI,CAACG,IAAL,CAAUa,MAFrB;AAGXC,MAAAA,GAAG,EAAEb,UAAU,CAACK,IAAX,CAAgBC,IAAhB,CAAqBI,OAArB;AAHM,KADR;AAMLH,IAAAA,QAAQ,EAAE;AACRE,MAAAA,GAAG,EAAEP,eAAe,CAACG,IAAhB,CAAqBE,QAArB,CAA8BG,OAA9B,EADG;AAERC,MAAAA,GAAG,EAAEV,WAAW,GAAGL,IAAI,CAACG,IAAL,CAAUa,MAFrB;AAGRC,MAAAA,GAAG,EAAEV,cAAc,CAACE,IAAf,CAAoBE,QAApB,CAA6BG,OAA7B;AAHG,KANL;AAWLI,IAAAA,WAAW,EAAG,GAAEhB,WAAW,CAACiB,MAAZ,CAAmBC,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,CAAiC,MAC/ClB,WAAW,CAACiB,MAAZ,CAAmBC,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,CACD,EAbI;AAcLC,IAAAA,WAAW,EAAG,GAAEjB,UAAU,CAACe,MAAX,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6B,CAA7B,CAAgC,MAC9ChB,UAAU,CAACe,MAAX,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6B,CAA7B,CACD,EAhBI,CAiBL;AACA;;AAlBK,GAAP;AAoBD,CA3CD;;AA6CA,eAAerB,mBAAf","sourcesContent":["const calculateStatistics = (data) => {\n  let temperatureSum = 0;\n  let highestTemp = data.list[0];\n  let lowestTemp = data.list[0];\n  let humiditySum = 0;\n  let highestHumidity = data.list[0];\n  let lowestHumidity = data.list[0];\n  for (const item of data.list) {\n    temperatureSum += item.main.temp;\n    humiditySum += item.main.humidity;\n    if (highestTemp.main.temp < item.main.temp) {\n      highestTemp = item;\n    }\n    if (lowestTemp.main.temp > item.main.temp) {\n      lowestTemp = item;\n    }\n    if (highestHumidity.main.temp < item.main.humidity) {\n      highestHumidity = item;\n    }\n    if (lowestHumidity.main.temp > item.main.humidity) {\n      lowestHumidity = item;\n    }\n  }\n  return {\n    temperature: {\n      max: highestTemp.main.temp.toFixed(),\n      avg: temperatureSum / data.list.length,\n      min: lowestTemp.main.temp.toFixed(),\n    },\n    humidity: {\n      max: highestHumidity.main.humidity.toFixed(),\n      avg: humiditySum / data.list.length,\n      min: lowestHumidity.main.humidity.toFixed(),\n    },\n    warmestTime: `${highestTemp.dt_txt.split(\" \")[1]}h, ${\n      highestTemp.dt_txt.split(\" \")[0]\n    }`,\n    coldestTime: `${lowestTemp.dt_txt.split(\" \")[1]}h, ${\n      lowestTemp.dt_txt.split(\" \")[0]\n    }`,\n    // warmestTime: new Date(highestTemp.dt * 1000).toUTCString(),\n    // coldestTime: new Date(lowestTemp.dt * 1000).toUTCString(),\n  };\n};\n\nexport default calculateStatistics;\n"]},"metadata":{},"sourceType":"module"}